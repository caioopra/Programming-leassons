15 e 16. Tipos básicos de dados em C#
-> estaticamente tipada

C# type - .NetFramework Type - Signed   - Bytes - Possible Values

sbyte	- System.SByte	- sim	- 1	- -128 a 127
short	- System.Int16	- sim	- 2	- -32768 a 32767
int	- System.Int32	- sim	- 4	- -2^31 a 2^31 -1	*
long	-		- sim   - 8 	- -2^63 a 2^63 -1	*
byte    - 		- nao	- 1	- 0 a 255
ushort	-		- nao	- 2	- 0 a 65535
uint	-		- nao   - 4	- 0 a 2^32 - 1
ulong	-		- nao	- 8	- 0 a 2^64 - 1

float	-		- sim	- 4	- +-1.5x10^-45 a +-3.4x10^38 com 7 casas decimais		*
double	-		- sim	- 8	- +-5.0x10^-324 a +-1.7x10^308 com 15 ou 16 casas decimais	*
decimal -		- sim	- 12	- +-1.0x10^-28  a +-7.9x10^28 com 28 ou 29 casas decimais

char    -		- N/A   - 2	- caracter Unicode
bool	-		- N/A   - 1/2   - true ou false

-> os tipos deo .Net precisam do namespace System
-> ao extrapolar o limite do valor, vai para o limite oposto (um byte que soma 255 + 1 = 0)
	-> complemento de 2

-> ao usar long: colocar L no final do valor
-> char: aspas simples
	-> ou pode usar a codificação Unicode: '\u...'

-> usar float: valorf
-> usar double: valor

-> string não é tipo básico da ling.
	-> é uma cadeia de caractéres Unicode e é imutável
	-> quando "muda" chamando a variável e dando valor, está criando uma string e atribuindo ela à variável
-> object: objeto genérico (toda classe em C# é subclasse de object)
	-> pode atribuir qualquer coisa à ela

-> dentro dos tipos, há propriedades: .MinValue e .MaxValue


17. Restrições e conveções para nomes
-> parâmetros de métodos, var dentro de métodos: camelCase
-> namespaces, classe, properties e métodos    : PascalCase
-> atributos internos da classe (privado)     : _padraoLastName


===========
-> compilar os programas: mcs arquivo.cs
-> executar: mono arquivo.exe
==========

18. Saída de dados em C#
-> Console.WriteLine( ... )   => mostra no console e quebra linha
-> Console.Write( ... )       => não quebra linha
-> vs/vscode: cw + tab preenche

-> printar float/double controlando casas decimais: varFloat.ToString("Fx")
	-> onde x é o número de casas decimais
	-> faz arredondamento (>= 5 vai pra cima)

-> mudar de , para . (visto quando o sist está em PT por exemplo): 
	-> precisa do namespace System.Globalization
	-> cw(variavel.ToString("Fx", CultureInfo.InvariantCulture))

=> placeholders: cw("{0}...{1}...{2}...{...}", var0, var1, var2, ..., varn)
	-> formatação: {numVar:Fx} (parte da conc é :Fx)
=> interpolação: cw($"{variavel} ... {variavel2:Fx}")
=> concatenação: como em python, usando +
	-> pode formatar cada variável individual


19. Operadores de atribuição
-> funciona +=, -=, ...
-> ++ e --
	-> a++ ou ++a (o mesmo para -)
-> a = 10; b = a ++	=> a = 11 e b = 10
	-> se fizesse b = ++a, b = 11 (atribuição acontece depois da soma nesse caso)


20. Conversão imlícita e casting
-> conteúdo de certo tipo pode ser naturalmente atribuído para var de outro tipo
	-> float x = 4.5; double y = x;  => possível (qtd de bytes compatível)
	-> do contrário não funcionaria, não pode ocupar mais espaço do que a variável aguenta 
		-> se quiser fazer isso, faz casting
-> casting: (novoTipo)variavel;		=> vai deixar fazer a conversão, mesmo que haja perca de dados
	-> cast de float/double para int: pega apenas a parte inteira
-> int a = 5; int b = 2; double resultado = a / b  -> resultado vai ter apenas a parte inteira, vai interpretar como div inteira
	-> para garantir, faz casting para double ou float em uma das variáveis


21. Operadores aritméticos
+, -, *, /, %
-> quando trabalhar com valores decimais, se for usar o valor diretamente, pode colocar "valor.0"
	-> garante que vai retornar com casas decimais

-> exponenciação: Math.Pow(base, expo) (expo.0 se quiser)
-> sqrt: Math.sqrt(valor)


22 e 23. Entradas de dados em C#
-> ler dados do teclado: Console.ReadLine()
	-> lê até quando tiver quebra de linha (enter)
	-> dados retornados na forma de string

string variavel = Console.ReadLine();
-> vai armazenar dentro de "variavel" o que for passado pelo teclado

-> armazenar em várias variáveis o que é escrito em uma mesma linha (usando Split):
	-> armazena na memória a string inteira, usa split para separar pelos espaços
	string s = Console.ReadLine();   // le a string completa
	string[] vet = s.Split(' ');
		-> vetor vet
	-> poderia colocar cada parte da string em uma variável diferente, basta acessar cada posição do vetor vet[0] ... vet[n-1]
-> pode simplificar em uma linha: 
	string[] v = Console.ReadLine().Split(' ');
	-> já le e na mesma linha separa
 
